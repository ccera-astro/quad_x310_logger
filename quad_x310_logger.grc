options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: quad_x310_logger
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: X310 Quad Logger
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: fft_size
  id: variable
  parameters:
    comment: ''
    value: '2048'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 860.0]
    rotation: 0
    state: true
- name: irate
  id: variable
  parameters:
    comment: MUST be multiple of 5, >= 10
    value: '15'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 508.0]
    rotation: 0
    state: true
- name: log10_k
  id: variable
  parameters:
    comment: ''
    value: -20*math.log10(fft_size)-10*math.log10(winpower/fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 860.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: srate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 860.0]
    rotation: 0
    state: enabled
- name: winpower
  id: variable
  parameters:
    comment: ''
    value: sum([x*x for x in window.blackman_harris(fft_size)])
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 860.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 44.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 140.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 276.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 428.0]
    rotation: 0
    state: true
- name: blocks_interleave_0
  id: blocks_interleave
  parameters:
    affinity: ''
    alias: ''
    blocksize: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '4'
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1792, 512.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/fft_size/irate)
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 60.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/fft_size/irate)
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 156.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_0_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/fft_size/irate)
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 260.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_0_0_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/fft_size/irate)
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 396.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 76.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 196.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 324.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 452.0]
    rotation: 0
    state: true
- name: caldev
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Calibration control TTY device"'
    short_id: ''
    type: str
    value: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 940.0]
    rotation: 0
    state: true
- name: caldur
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Calibration duration, seconds"'
    short_id: ''
    type: eng_float
    value: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 1148.0]
    rotation: 0
    state: true
- name: caltimes
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Calibration times, decimalized LMST"'
    short_id: ''
    type: str
    value: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 1044.0]
    rotation: 0
    state: true
- name: decln
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Local Declination"'
    short_id: ''
    type: eng_float
    value: '0.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 1044.0]
    rotation: 0
    state: true
- name: f1
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Frequency 1"'
    short_id: ''
    type: eng_float
    value: 1420.4058e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 940.0]
    rotation: 0
    state: true
- name: f2
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Frequency 2"'
    short_id: ''
    type: eng_float
    value: 1420.4058e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 940.0]
    rotation: 0
    state: true
- name: f3
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Frequency 3"'
    short_id: ''
    type: eng_float
    value: 611e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 940.0]
    rotation: 0
    state: true
- name: f4
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Frequency 4"'
    short_id: ''
    type: eng_float
    value: 1000e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 940.0]
    rotation: 0
    state: true
- name: fft_logger
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport ephem\nfrom pylibftdi import BitBangDevice\n\
      import scipy.signal\n\n# Given longitude(decimal degrees as a float)\n#\n# Return\
      \ the current sidereal time as a string with\n#  \",\" separated tokens\n#\n\
      def cur_sidereal(longitude):\n    longstr = \"%02d\" % int(longitude)\n    longstr\
      \ = longstr + \":\"\n    longitude = abs(longitude)\n    frac = longitude -\
      \ int(longitude)\n    frac *= 60\n    mins = int(frac)\n    longstr += \"%02d\"\
      \ % mins\n    longstr += \":00\"\n    x = ephem.Observer()\n    x.date = ephem.now()\n\
      \    x.long = longstr\n    jdate = ephem.julian_date(x)\n    tokens=str(x.sidereal_time()).split(\"\
      :\")\n    hours=int(tokens[0])\n    minutes=int(tokens[1])\n    seconds=int(float(tokens[2]))\n\
      \    sidt = \"%02d,%02d,%02d\" % (hours, minutes, seconds)\n    return (sidt)\n\
      \n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"4-channel FFT logger with two layers of filters\n\
      \         fft_size - fixed at 2048\n         f1  - channel 1 frequency\n   \
      \      f2  - channel 2 frequency\n         f3  - channel 3 frequency\n     \
      \    f4  - channel 4 frequency\n         decln   - declination (decimal degrees)\n\
      \         longitude - longitude (decimal degrees)\n         prefix - filename\
      \ prefix for log files\n         logtime  - logging interval, in seconds\n \
      \        irate   - internal post-FFT sample-rate (Hz)\n         caldev  - calibration\
      \ device identifier (for libpyftdi)\n         caltimes  - comma-separated list\
      \ of LMST times to turn on CAL\n         caldur    - CAL duration, in seconds\n\
      \         bandwidth  - input bandwidth, Hz\n         fmode   - filtering mode:\
      \ 'median', 'min', 'max', \"rfi\"\n         klen - kernel length for rfi mode\
      \  3 or 5\"\"\"\n\n    def __init__(self, fft_size=2048,f1=1420.4058e6,f2=1420.4058e6,f3=611e6,f4=1000e6,\n\
      \        decln=0.0,longitude=-76.03,prefix=\"./\", logtime=10.0, irate=10, caldev=\"\
      \", caltimes=\"\", caldur=0.0,\n        bandwidth=1e6, fmode=\"median\", klen=3,\
      \ schedule=\"\"):  # only default arguments here\n        \"\"\"arguments to\
      \ this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Logger for multi vectors (FFT)',   # will\
      \ show up in GRC\n            in_sig=[(np.float32,fft_size)]*4,\n          \
      \  out_sig=None\n        )\n        # if an attribute with the same name as\
      \ a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.fft_size = fft_size\n        self.f1 = f1\n        self.f2\
      \ = f2\n        self.f3 = f3\n        self.f4 = f4\n        self.freqs = [self.f1,self.f2,self.f3,self.f4]\n\
      \        self.logtime = logtime\n        self.decln = decln\n        self.prefix\
      \ = prefix\n        self.longitude = longitude\n        self.then = time.time()\n\
      \        self.mdarrays = [[]] * len(self.freqs)\n        self.irate = irate\n\
      \        self.bandwidth = bandwidth\n        self.avgarrays = []\n        self.avgcount\
      \ = []\n        self.caltimes = caltimes\n        self.caldev = caldev\n   \
      \     self.caldur = caldur\n        self.fmode = fmode\n        self.klen =\
      \ klen\n        self.bbd = None\n        self.calstate = \"IDLE\"\n        self.calthen\
      \ = time.time()\n        self.caltime = time.time()\n        self.schedule =\
      \ schedule\n        if (self.caldev != None and self.caldev != \"\" and self.caltimes\
      \ != \"\" and\n            self.caltimes != None and self.caldur > 0):\n   \
      \         self.bbd = BitBangDevice(self.caldev)\n            self.bbd.direction\
      \ = 0xFF\n            self.bbd.port = 0x00\n        for i in range(0,len(self.freqs)):\n\
      \            self.avgarrays.append(np.zeros(self.fft_size,dtype=np.float32))\n\
      \            self.avgcount.append(0)\n\n    def work(self, input_items, output_items):\n\
      \        \n        #\n        # Check if it's time to fire the calibrator\n\
      \        #\n        #\n        # Make sure we have a calibrator to fire\n  \
      \      #\n        if (self.bbd != None and ((time.time() - self.calthen) >=\
      \ 1)):\n            self.calthen = time.time()\n            \n            #\
      \ \n            # We do the conversion every time, because the \"caltimes\"\
      \ parameter\n            #  can actually be changed at runtime via XMLRPC.\n\
      \            #\n            self.calfloats = []\n            if (self.caltimes\
      \ != None and self.caltimes != \"\"):\n                for x in self.caltimes.split(\"\
      ,\"):\n                    self.calfloats.append(float(x))  \n            \n\
      \            #\n            # Pick up current *SIDEREAL* time\n            #\n\
      \            st = cur_sidereal(self.longitude)\n            st = st.split(\"\
      ,\")\n            st = float(st[0])+float(st[1])/60.0+float(st[2])/3600.0\n\n\
      \            #\n            # If we're in an IDLE state\n            #\n   \
      \         if (self.calstate == \"IDLE\"):\n                #\n             \
      \   # If we have a match\n                #\n                for x in self.calfloats:\n\
      \                    if (abs(st-x) <= (5.0/3600.0)):\n                     \
      \   self.calstate = \"ON\"\n                        self.bbd.port = 0x01\n \
      \                       self.caltime = time.time()+self.caldur\n           \
      \ #\n            # We aren't IDLE...\n            #\n            if (self.calstate\
      \ == \"ON\"):\n                #\n                # We've been ON long enough\n\
      \                #\n                if (time.time() >= self.caltime):\n    \
      \                self.calstate = \"IDLE\"\n                    self.bbd.port\
      \ = 0x00\n                    \n            \n        #\n        # For each\
      \ input channel\n        #\n        for x in range(len(input_items)):\n    \
      \        v = input_items[x]\n            #\n            # For each of the vectors\
      \ being presented in this channel\n            #\n            for wector in\
      \ v:\n                #\n                # Update buffer for later median-filter\n\
      \                #\n                self.mdarrays[x].append(wector)\n      \
      \  #\n        # Time to median-reduce the data over a 1 second interval\n  \
      \      #\n        if (len(self.mdarrays[0]) >= self.irate):\n            for\
      \ x in range(len(self.freqs)):\n                #\n                # Turn it\
      \ into a first-class Numpy 2D array\n                #\n                a =\
      \ np.array(self.mdarrays[x])\n                \n                #\n        \
      \        # Compute median or min or max on transposed axes\n               \
      \ #\n\n                #\n                # 1D median\n                #\n \
      \               if self.fmode == \"median\":\n                    median = np.median(a.transpose(),axis=1)\n\
      \                \n                #\n                # Just he minimum\n  \
      \              #\n                elif self.fmode == \"min\":\n            \
      \        median = np.min(a.transpose(), axis=1)\n                \n        \
      \        #\n                # or the max\n                #\n              \
      \  elif self.fmode == \"max\":\n                    median = np.max(a.transpose(),\
      \ axis=1)\n                \n                #\n                # or the mean\n\
      \                #\n                elif self.fmode == \"mean\":\n         \
      \           median = np.mean(a.transpose(), axis=1)\n                #\n   \
      \             # Perform a 2D median filter on the FFT data\n               \
      \ #\n                # This is often used in de-speckling images\n         \
      \       # Might work here, also\n                #\n                elif self.fmode\
      \ == \"rfi\":\n                    a = scipy.signal.medfilt2d(a,kernel_size=self.klen)\n\
      \                    median = np.mean(a.transpose(), axis=1)\n             \
      \           \n                self.avgarrays[x] = np.add(self.avgarrays[x],\
      \ median)\n                self.avgcount[x] += 1\n                \n       \
      \         #\n                # \"Zero out\" the corresponding mdarray\n    \
      \            #\n                self.mdarrays[x] = []\n        #\n        #\
      \ Time to average and log\n        #\n        if ((time.time() - self.then)\
      \ > self.logtime):\n            self.then = time.time()\n            for x in\
      \ range(len(self.freqs)):\n                #\n                # If this avgarray\
      \ has anything in it\n                #\n                if (self.avgcount[x]\
      \ > 0):\n                    #\n                    # Compute average\n    \
      \                #\n                    av = np.divide(self.avgarrays[x], self.avgcount[x])\n\
      \                    \n                    #\n                    # Zero-out\n\
      \                    #\n                    self.avgarrays[x] = np.multiply(self.avgarrays[x],\
      \ 0.0)\n                    self.avgcount[x] = 0\n                    \n   \
      \                 #\n                    # Get timestamps in both UTC and LMST\n\
      \                    #\n                    ltp = time.gmtime()\n          \
      \          ds = \"%04d%02d%02d\" % (ltp.tm_year, ltp.tm_mon, ltp.tm_mday)\n\
      \                    fname = self.prefix+\"%04d-%d-\" % (int(self.freqs[x]/1.e06),\
      \ x)\n                    fname += ds\n                    fname += \".csv\"\
      \n                    curt = cur_sidereal(self.longitude)\n                \
      \    \n                    #\n                    # Use this to do scheduled\
      \ logging\n                    #  based on a schedule of (lmst,duration) tuples\n\
      \                    #  contained in \"self.schedule\"\n                   \
      \ #\n                    curt_hours = curt.split(\",\")\n                  \
      \  curt_hours = float(curt_hours[0])\n                    curt_hours += (float(curt_hours[1])/60.0)\n\
      \                    curt_hours += (float(curt_hours[2])/3600.0)\n         \
      \           \n                    within_window = False\n                  \
      \  if (self.schedule != \"\" and self.schedule != None):\n                 \
      \       sch = eval(self.schedule)\n                        for sitems in sch:\n\
      \                            low = sitems[0]-(sitems[1]/2.0)\n             \
      \               high = sitems[0]+(sitems[1]/2.0)\n                         \
      \   if (curt_hours >= low and curt_hours <= high):\n                       \
      \         within_window = True\n                        \n                 \
      \   #\n                    # If there is no schedule, or there is and we're\
      \ within\n                    #  one of the schedules time windows, log\n  \
      \                  #\n                    if (self.schedule == \"\" or self.schedule\
      \ == None or\n                        within_window == True):\n            \
      \            \n                        fp = open(fname, \"a\")\n           \
      \             #\n                        # Write headers\n                 \
      \       #\n\n                        fp.write(\"%02d,%02d,%02d\" % (ltp.tm_hour,\
      \ ltp.tm_min, ltp.tm_sec))\n                        fp.write(\",%s,\" % curt)\n\
      \                        fp.write(\"%.2f,\" % self.decln)\n                \
      \        fp.write(\"%.5f,\" % (self.freqs[x]/1.0e6))\n                     \
      \   fp.write(\"%d,\" % (0 if self.calstate != \"ON\" else 1))\n            \
      \            fp.write(\"%d,\" % int(self.bandwidth/1e6))\n                 \
      \       \n                        #\n                        # Write data values\n\
      \                        #\n                        l=len(av)\n            \
      \            for v in av:\n                            fp.write(\"%.6e\" % v)\n\
      \                            l -= 1\n                            if (l > 0):\n\
      \                                fp.write(\",\")\n                        fp.write(\"\
      \\n\")\n                        fp.close()\n                    \n         \
      \       \n              \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    bandwidth: srate
    caldev: caldev
    caldur: caldur
    caltimes: caltimes
    comment: ''
    decln: decln
    f1: f1
    f2: f2
    f3: f3
    f4: f4
    fft_size: fft_size
    fmode: fmode
    irate: irate
    klen: klen
    logtime: logtime
    longitude: longitude
    maxoutbuf: '0'
    minoutbuf: '0'
    prefix: prefix
    schedule: ''''''
  states:
    _io_cache: '(''Logger for multi vectors (FFT)'', ''blk'', [(''fft_size'', ''2048''),
      (''f1'', ''1420405800.0''), (''f2'', ''1420405800.0''), (''f3'', ''611000000.0''),
      (''f4'', ''1000000000.0''), (''decln'', ''0.0''), (''longitude'', ''-76.03''),
      (''prefix'', "''./''"), (''logtime'', ''10.0''), (''irate'', ''10''), (''caldev'',
      "''''"), (''caltimes'', "''''"), (''caldur'', ''0.0''), (''bandwidth'', ''1000000.0''),
      (''fmode'', "''median''"), (''klen'', ''3''), (''schedule'', "''''")], [(''0'',
      ''float'', 2048), (''1'', ''float'', 2048), (''2'', ''float'', 2048), (''3'',
      ''float'', 2048)], [], ''4-channel FFT logger with two layers of filters\n         fft_size
      - fixed at 2048\n         f1  - channel 1 frequency\n         f2  - channel
      2 frequency\n         f3  - channel 3 frequency\n         f4  - channel 4 frequency\n         decln   -
      declination (decimal degrees)\n         longitude - longitude (decimal degrees)\n         prefix
      - filename prefix for log files\n         logtime  - logging interval, in seconds\n         irate   -
      internal post-FFT sample-rate (Hz)\n         caldev  - calibration device identifier
      (for libpyftdi)\n         caltimes  - comma-separated list of LMST times to
      turn on CAL\n         caldur    - CAL duration, in seconds\n         bandwidth  -
      input bandwidth, Hz\n         fmode   - filtering mode: \''median\'', \''min\'',
      \''max\'', "rfi"\n         klen - kernel length for rfi mode  3 or 5'', [''bandwidth'',
      ''caldev'', ''caldur'', ''caltimes'', ''decln'', ''f1'', ''f2'', ''f3'', ''f4'',
      ''fft_size'', ''fmode'', ''irate'', ''klen'', ''logtime'', ''longitude'', ''prefix'',
      ''schedule''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1984, 148.0]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 4.0]
    rotation: 0
    state: true
- name: fft_vxx_0_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 140.0]
    rotation: 0
    state: true
- name: fft_vxx_0_0_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 284.0]
    rotation: 0
    state: true
- name: fft_vxx_0_0_0_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 420.0]
    rotation: 0
    state: true
- name: fmode
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"RFI filter mode"'
    short_id: ''
    type: str
    value: '"median"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 1148.0]
    rotation: 0
    state: true
- name: g1
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Channel 1 gain"'
    short_id: ''
    type: eng_float
    value: '85.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 1044.0]
    rotation: 0
    state: true
- name: g2
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Channel 2 gain"'
    short_id: ''
    type: eng_float
    value: '85.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 1044.0]
    rotation: 0
    state: true
- name: g3
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Channel 3 gain"'
    short_id: ''
    type: eng_float
    value: '85.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 1044.0]
    rotation: 0
    state: true
- name: g4
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Channel 4 gain"'
    short_id: ''
    type: eng_float
    value: '85.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 1044.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: true
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import ra_funcs
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: integ
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Integration time, seconds"'
    short_id: ''
    type: eng_float
    value: '2.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 820.0]
    rotation: 0
    state: true
- name: klen
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Kernel Len for ''rfi'' mode"'
    short_id: ''
    type: intx
    value: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 1148.0]
    rotation: 0
    state: true
- name: logtime
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Logging time, seconds"'
    short_id: ''
    type: eng_float
    value: '5.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 828.0]
    rotation: 0
    state: true
- name: longitude
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Local longitude"'
    short_id: ''
    type: eng_float
    value: '-76.0413'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 1044.0]
    rotation: 0
    state: true
- name: prefix
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"File prefix"'
    short_id: ''
    type: str
    value: '"./"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 940.0]
    rotation: 0
    state: true
- name: schedule
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: '"Logging schedule (as list of tuples"'
    short_id: ''
    type: str
    value: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 1148.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: ra_funcs.getalpha(1.0/integ,(srate/fft_size))
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 20.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: ra_funcs.getalpha(1.0/integ, (srate/fft_size))
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 156.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_0_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: ra_funcs.getalpha(1.0/integ,(srate/fft_size))
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 260.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_0_0_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: ra_funcs.getalpha(1.0/integ,(srate/fft_size))
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 412.0]
    rotation: 0
    state: true
- name: srate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sample Rate
    short_id: ''
    type: eng_float
    value: 1.0e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 940.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: RX1
    ant1: RX2
    ant10: RX2
    ant11: RX2
    ant12: RX2
    ant13: RX2
    ant14: RX2
    ant15: RX2
    ant16: RX2
    ant17: RX2
    ant18: RX2
    ant19: RX2
    ant2: RX1
    ant20: RX2
    ant21: RX2
    ant22: RX2
    ant23: RX2
    ant24: RX2
    ant25: RX2
    ant26: RX2
    ant27: RX2
    ant28: RX2
    ant29: RX2
    ant3: RX2
    ant30: RX2
    ant31: RX2
    ant4: RX2
    ant5: RX2
    ant6: RX2
    ant7: RX2
    ant8: RX2
    ant9: RX2
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: f1
    center_freq1: f2
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: f3
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: f4
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 200e6
    clock_source0: external
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: addr=192.168.40.2,type=x300
    dev_args: master_clock_rate=200e6
    gain0: g1
    gain1: g2
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: g3
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: g4
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'True'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: companion
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '4'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: '"A:0 A:1 B:0 B:1"'
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'True'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 116.0]
    rotation: 0
    state: enabled
- name: xmlrpc_server_0
  id: xmlrpc_server
  parameters:
    addr: localhost
    alias: ''
    comment: ''
    port: '31420'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 812.0]
    rotation: 0
    state: true
- name: zeromq_pub_sink_0
  id: zeromq_pub_sink
  parameters:
    address: tcp://127.0.0.1:14200
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    key: ''
    pass_tags: 'False'
    timeout: '100'
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2032, 516.0]
    rotation: 0
    state: true

connections:
- [blocks_complex_to_mag_squared_0, '0', single_pole_iir_filter_xx_0, '0']
- [blocks_complex_to_mag_squared_0_0, '0', single_pole_iir_filter_xx_0_0, '0']
- [blocks_complex_to_mag_squared_0_0_0, '0', single_pole_iir_filter_xx_0_0_0, '0']
- [blocks_complex_to_mag_squared_0_0_0_0, '0', single_pole_iir_filter_xx_0_0_0_0,
  '0']
- [blocks_interleave_0, '0', zeromq_pub_sink_0, '0']
- [blocks_keep_one_in_n_0, '0', blocks_interleave_0, '0']
- [blocks_keep_one_in_n_0, '0', fft_logger, '0']
- [blocks_keep_one_in_n_0_0, '0', blocks_interleave_0, '1']
- [blocks_keep_one_in_n_0_0, '0', fft_logger, '1']
- [blocks_keep_one_in_n_0_0_0, '0', blocks_interleave_0, '2']
- [blocks_keep_one_in_n_0_0_0, '0', fft_logger, '2']
- [blocks_keep_one_in_n_0_0_0_0, '0', blocks_interleave_0, '3']
- [blocks_keep_one_in_n_0_0_0_0, '0', fft_logger, '3']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [blocks_stream_to_vector_0_0, '0', fft_vxx_0_0, '0']
- [blocks_stream_to_vector_0_0_0, '0', fft_vxx_0_0_0, '0']
- [blocks_stream_to_vector_0_0_0_0, '0', fft_vxx_0_0_0_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [fft_vxx_0_0, '0', blocks_complex_to_mag_squared_0_0, '0']
- [fft_vxx_0_0_0, '0', blocks_complex_to_mag_squared_0_0_0, '0']
- [fft_vxx_0_0_0_0, '0', blocks_complex_to_mag_squared_0_0_0_0, '0']
- [single_pole_iir_filter_xx_0, '0', blocks_keep_one_in_n_0, '0']
- [single_pole_iir_filter_xx_0_0, '0', blocks_keep_one_in_n_0_0, '0']
- [single_pole_iir_filter_xx_0_0_0, '0', blocks_keep_one_in_n_0_0_0, '0']
- [single_pole_iir_filter_xx_0_0_0_0, '0', blocks_keep_one_in_n_0_0_0_0, '0']
- [uhd_usrp_source_0, '0', blocks_stream_to_vector_0, '0']
- [uhd_usrp_source_0, '1', blocks_stream_to_vector_0_0, '0']
- [uhd_usrp_source_0, '2', blocks_stream_to_vector_0_0_0, '0']
- [uhd_usrp_source_0, '3', blocks_stream_to_vector_0_0_0_0, '0']

metadata:
  file_format: 1
